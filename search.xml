<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>go 3.08 数组</title>
      <link href="/2019/05/22/golang/go-3-08-%E6%95%B0%E7%BB%84/"/>
      <url>/2019/05/22/golang/go-3-08-%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><p>##数组<br>数组是同一个类型的数据集合</p><p>##基本操作<br>初始化与遍列<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">var a [10]int //只是声明，未初始化，未初始化的数组元素默认为0</span><br><span class="line">fmt.Println(&quot;a = &quot;, a)</span><br><span class="line"></span><br><span class="line">var b [6]int = [6]int&#123;10, 20, 30, 40&#125; // 部份初始化</span><br><span class="line">fmt.Println(&quot;b = &quot;, b)</span><br><span class="line">c := [6]int&#123;10, 20, 30, 40&#125; // 部份初始化</span><br><span class="line">fmt.Println(&quot;c = &quot;, c)</span><br><span class="line"></span><br><span class="line">d := [5]int&#123;1, 2, 3, 40, 50&#125; // 全部初始化</span><br><span class="line">fmt.Println(&quot;d = &quot;, d)</span><br><span class="line"></span><br><span class="line">  e := [5]int&#123;0: 100, 2: &apos;a&apos;, 4: 10&#125; // 指定下标为0,2,4的元素初始化</span><br><span class="line">fmt.Println(&quot;e = &quot;, e)</span><br><span class="line"></span><br><span class="line">//通过下标获取元素</span><br><span class="line">for i := 0; i &lt; len(b); i++ &#123;</span><br><span class="line">fmt.Printf(&quot;index:b[%d] = %d\n&quot;, i, b[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 通过range遍列数组</span><br><span class="line">for i, data := range b &#123;</span><br><span class="line">fmt.Printf(&quot;range:b[%d] = %d\n&quot;, i, data)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>##二维数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">// 有多少个[]，就是多少维</span><br><span class="line">  // 有多少个[],就用多少个循环</span><br><span class="line">var a [3][4]int //只是声明，未初始化，未初始化的数组元素默认为0</span><br><span class="line">fmt.Println(&quot;a = &quot;, a)</span><br><span class="line">data := 0</span><br><span class="line">for i := 0; i &lt; 3; i++ &#123;</span><br><span class="line">for j := 0; j &lt; 4; j++ &#123;</span><br><span class="line">data++</span><br><span class="line">a[i][j] = data</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(&quot;a = &quot;, a)</span><br><span class="line"></span><br><span class="line">  // 二维数组初始化部分元素</span><br><span class="line">  b := [3][4]int&#123;&#123;1, 2, 3, 4&#125;&#125;</span><br><span class="line">  fmt.Println(&quot;b = &quot;, b)</span><br><span class="line"></span><br><span class="line">  // 二维数组指定元素初始化</span><br><span class="line">  c := [3][4]int&#123;2: &#123;1, 2, 3: 100&#125;&#125;</span><br><span class="line">  fmt.Println(&quot;c = &quot;, c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>##数组支持比较<br>只支持：==，！=</p><p>##同类型且同长度的数组可以赋值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a := [5]int&#123;2, 3, 3&#125;</span><br><span class="line">var b [5]int</span><br><span class="line">b = a</span><br><span class="line">fmt.Println(&quot;b = &quot;, b)</span><br></pre></td></tr></table></figure></p><p>##随机数的使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;math/rand&quot;</span><br><span class="line">&quot;time&quot;</span><br><span class="line">)</span><br><span class="line">func main() &#123;</span><br><span class="line">  // 设置随机种子，只需要设置一次</span><br><span class="line">// 设置随机的种子，如果种子不变，则每次产生的随机数都一样</span><br><span class="line">// 所以以时间的变化设置变化的种子，以产生不同的随机数</span><br><span class="line">rand.Seed(time.Now().UnixNano())</span><br><span class="line">for i := 0; i &lt; 5; i++ &#123;</span><br><span class="line">fmt.Println(&quot;rand = &quot;, rand.Intn(100)) // 产生100以内的随机整数</span><br><span class="line">fmt.Println(&quot;rand = &quot;, rand.Int())  // 产生很大的随机整数</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>##冒泡排序代码的实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">a := []int&#123;10, 12, 34, 330, 56, 7, 2, 23&#125;</span><br><span class="line">fmt.Println(a)</span><br><span class="line">for i := 0; i &lt; len(a)-1; i++ &#123;</span><br><span class="line">for j := 0; j &lt; len(a)-i-1; j++ &#123;  //每一轮把最大的最到放到上面</span><br><span class="line">if a[j] &gt; a[j+1] &#123;</span><br><span class="line">a[j], a[j+1] = a[j+1], a[j]</span><br><span class="line">fmt.Println(&quot;a = &quot;, a)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">a := []int&#123;10, 12, 34, 330, 56, 7, 2, 23&#125;</span><br><span class="line">fmt.Println(a)</span><br><span class="line">for i := 0; i &lt; len(a)-1; i++ &#123;</span><br><span class="line">for j := i + 1; j &lt; len(a); j++ &#123;  // 每次把小的放前面</span><br><span class="line">if a[i] &gt; a[j] &#123;</span><br><span class="line">a[i], a[j] = a[j], a[i]</span><br><span class="line">fmt.Println(&quot;a = &quot;, a)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go 3.02 指针</title>
      <link href="/2019/05/21/golang/go-3-02-%E6%8C%87%E9%92%88/"/>
      <url>/2019/05/21/golang/go-3-02-%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><p>##变量内存和指针地址<br>指针是一个代表着某个内存地址的值。这个内存地址往往是在内存中存储的另一个变量的值的起始位置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">// 每个变量有两层含义：变量的内存， 变量的地址</span><br><span class="line">var a int = 10</span><br><span class="line">fmt.Printf(&quot;a = %d \n&quot;, a)   // 变量的内存</span><br><span class="line">fmt.Printf(&quot;&amp;a = %v \n&quot;, &amp;a) // 取地址，取变量a的内存地址</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打个比喻帮助理解：<br>内存  -&gt; 想像成教室<br>&amp;a   -&gt; 想像成教室的门牌号<br>教室 存放 桌子<br>内存存放数据： a = 10</p><p>##指针的基本使用</p><p>保存某个变量的地址，需要指针类型<br>如：*int保存int的地址，**int保存*int的地址<br>声明指针类型:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">func main()&#123;</span><br><span class="line">  var a int = 10</span><br><span class="line">  var p *int //声明p为指针类型</span><br><span class="line">p = &amp;a</span><br><span class="line">fmt.Printf(&quot;p = %v, &amp;a = %v \n&quot;, p, &amp;a)</span><br><span class="line">*p = 666 // *p操作的不是p的内存，是p所指向的内存（就是a）</span><br><span class="line">fmt.Printf(&quot;*p = %v, a=%v\n&quot;, *p, a)</span><br><span class="line">var q **int // 声明一个指针的指针q</span><br><span class="line">q = &amp;p      // 把p的内存地址赋值给q</span><br><span class="line">fmt.Printf(&quot;q = %v,&amp;p = %v\n&quot;, q, &amp;p)</span><br><span class="line">  var b int = 20</span><br><span class="line">*q = &amp;b // 使用*q操作p的值，即让p指向b的内存地址</span><br><span class="line">fmt.Printf(&quot;*p= %v&quot;, *p) //由于p的指向变成了b的地址,所以这里*p就变成了b的值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>##不要操作没有合法指向的内存<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">// 不要操作没有合法指向的内存（空批针）</span><br><span class="line">var p *int</span><br><span class="line">p = nil</span><br><span class="line">fmt.Printf(&quot;p = %v\n&quot;, p)</span><br><span class="line">*p = 666  // panic: runtime error: invalid memory address or nil pointer dereference</span><br><span class="line">            // 这样操作没有合法向的内存会崩溃</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>##new函数的使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">var p *int  // 声明p为指针类型</span><br><span class="line">p = new(int)  // p 指向合法内存,有合法内存后，可以操作内存</span><br><span class="line">  fmt.Printf(&quot;p = %v\n&quot;, p)</span><br><span class="line">*p = 666 //可以操作内存</span><br><span class="line">fmt.Printf(&quot;*p = %v \n&quot;, *p)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>##值传递与地址传递</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">func swap(a, b int) &#123;</span><br><span class="line">a, b = b, a</span><br><span class="line">fmt.Printf(&quot;swap:a=%d,b=%d\n&quot;, a, b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func swap02(p1, p2 *int) &#123;</span><br><span class="line">*p1, *p2 = *p2, *p1</span><br><span class="line">fmt.Printf(&quot;swap02:*p1=%d,*p2=%d\n&quot;, *p1, *p2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">var a, b int = 10, 20</span><br><span class="line">swap(a, b)</span><br><span class="line">fmt.Printf(&quot;main:a=%d,b=%d\n&quot;, a, b)</span><br><span class="line">swap02(&amp;a, &amp;b)  //通过地址交换，从而改变了a,b的内容</span><br><span class="line">fmt.Printf(&quot;main:a=%d,b=%d\n&quot;, a, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go 2.04 函数</title>
      <link href="/2019/05/17/golang/go-2-04-%E5%87%BD%E6%95%B0_/"/>
      <url>/2019/05/17/golang/go-2-04-%E5%87%BD%E6%95%B0_/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#普通函数">普通函数</a></li><li><a href="#不定参数函数">不定参数函数</a></li><li><a href="#固定参数与不定参数函数同时写时形参只能放最后">固定参数与不定参数函数同时写时，形参只能放最后</a></li><li><a href="#有返回值函数给返回值起变量名">有返回值函数,给返回值起变量名</a></li><li><a href="#有返回值函数未给返回值起变量名">有返回值函数,未给返回值起变量名</a></li><li><a href="#递归函数调用流程">递归函数调用流程</a></li><li><a href="#使用type定义函数为一种类型">使用type定义函数为一种类型</a></li><li><a href="#匿名函数">匿名函数</a></li></ul><p>函数定义说明：<br>1）函数由关键字func开始声明<br>2）函数首字母小写即为private, 首字母大写即为public<br>3）不支持默认参数</p><h2 id="普通函数"><a href="#普通函数" class="headerlink" title="普通函数"></a>普通函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">func MyFunc01(a, b int) &#123;</span><br><span class="line">// 等价于func MyFunc01(a int, b int) &#123;</span><br><span class="line">fmt.Println(a)</span><br><span class="line">fmt.Println(b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">a := 1</span><br><span class="line">b := 2</span><br><span class="line">MyFunc01(a, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="不定参数函数"><a href="#不定参数函数" class="headerlink" title="不定参数函数"></a>不定参数函数</h2><p>函数的传递参数的个数不定，类型确定为同一种类型<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 传递的参数可能是0个或多个</span><br><span class="line">func MyFunc01(args ...int) &#123;</span><br><span class="line">for _, data := range args &#123;</span><br><span class="line">fmt.Println(data)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line"></span><br><span class="line">a := 1</span><br><span class="line">b := 2</span><br><span class="line">MyFunc01(a, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="固定参数与不定参数函数同时写时，形参只能放最后"><a href="#固定参数与不定参数函数同时写时，形参只能放最后" class="headerlink" title="固定参数与不定参数函数同时写时，形参只能放最后"></a>固定参数与不定参数函数同时写时，形参只能放最后</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">func MyFunc01(a int, args ...int) &#123;</span><br><span class="line">fmt.Println(&quot;a = &quot;, a)</span><br><span class="line">for _, data := range args &#123;</span><br><span class="line">fmt.Println(&quot;args element value:&quot;, data)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line"></span><br><span class="line">a := 1</span><br><span class="line">b := 2</span><br><span class="line">MyFunc01(a, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="有返回值函数-给返回值起变量名"><a href="#有返回值函数-给返回值起变量名" class="headerlink" title="有返回值函数,给返回值起变量名"></a>有返回值函数,给返回值起变量名</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func MyFunc01(a, b int) (result_1, result_2 int) &#123; // 给返回值起变量名</span><br><span class="line">result_1, result_2 = a, b</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">a := 1</span><br><span class="line">b := 2</span><br><span class="line">c, d := MyFunc01(a, b)</span><br><span class="line">fmt.Println(c)</span><br><span class="line">fmt.Println(d)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="有返回值函数-未给返回值起变量名"><a href="#有返回值函数-未给返回值起变量名" class="headerlink" title="有返回值函数,未给返回值起变量名"></a>有返回值函数,未给返回值起变量名</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">func MyFunc01(a, b int) (int, int) &#123; // 不给返回值起变量名，只有返回类型</span><br><span class="line">return a,b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">a := 1</span><br><span class="line">b := 2</span><br><span class="line">c, d := MyFunc01(a, b)</span><br><span class="line">fmt.Println(c)</span><br><span class="line">fmt.Println(d)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="递归函数调用流程"><a href="#递归函数调用流程" class="headerlink" title="递归函数调用流程"></a>递归函数调用流程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func MyFunc01(a int) &#123;</span><br><span class="line">if a == 1 &#123;</span><br><span class="line">fmt.Println(&quot;a =&quot;, a)</span><br><span class="line">return //终止函数调用</span><br><span class="line">&#125;</span><br><span class="line">MyFunc01(a - 1)</span><br><span class="line">fmt.Println(&quot;a =&quot;, a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">a := 3</span><br><span class="line">MyFunc01(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：<br>a = 1<br>a = 2<br>a = 3</p><h2 id="使用type定义函数为一种类型"><a href="#使用type定义函数为一种类型" class="headerlink" title="使用type定义函数为一种类型"></a>使用type定义函数为一种类型</h2><p>函数也是一种数据类型，通过type给一个函数类型起名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func Add(a, b int) int &#123;</span><br><span class="line">return a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func Minus(a, b int) int &#123;</span><br><span class="line">return a - b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type FuncType func(int, int) int // 使用type关键字定义一种函数类型，命名为Functype</span><br><span class="line"></span><br><span class="line">func Calc(a, b int, calc FuncType) int &#123;</span><br><span class="line">return calc(a, b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">a := 1</span><br><span class="line">b := 2</span><br><span class="line">result := Calc(a, b, Add)</span><br><span class="line">fmt.Printf(&quot;calc result is: %v\n&quot;, result)</span><br><span class="line"></span><br><span class="line">result = Calc(a, b, Minus)</span><br><span class="line">fmt.Printf(&quot;calc result is: %v\n&quot;, result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">a := 3</span><br><span class="line">str := &quot;abc&quot;</span><br><span class="line">func() &#123; //匿名函数：没有函数名称及函数声明</span><br><span class="line">fmt.Println(&quot;a = &quot;, a)</span><br><span class="line">fmt.Println(&quot;str = &quot;, str)</span><br><span class="line">str = &quot;mike&quot;  // 由于闭包引用方式捕获外部变量 ，所以这里会改变函数之外的变量</span><br><span class="line">&#125;() // 使用()调用匿名函数</span><br><span class="line"></span><br><span class="line">fmt.Println(str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>带参数，带返回值的匿名函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">a := 3</span><br><span class="line">str := &quot;abc&quot;</span><br><span class="line">c, d := func(a int, b string) (c int, d string) &#123; //带参数和返回值</span><br><span class="line">fmt.Println(&quot;a = &quot;, a)</span><br><span class="line">fmt.Println(&quot;str = &quot;, b)</span><br><span class="line">a = 10</span><br><span class="line">c = a</span><br><span class="line">d = &quot;mike&quot;</span><br><span class="line">return</span><br><span class="line">&#125;(a, str) //调用匿名函数，传入参数</span><br><span class="line"></span><br><span class="line">fmt.Println(a)</span><br><span class="line">fmt.Println(str)</span><br><span class="line">fmt.Println(c)</span><br><span class="line">fmt.Println(d)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go 2.19 调用</title>
      <link href="/2019/05/17/golang/go-2-19%E8%B0%83%E7%94%A8_/"/>
      <url>/2019/05/17/golang/go-2-19%E8%B0%83%E7%94%A8_/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#defer">defer</a></li><li><a href="#defer与匿名函数结合">defer与匿名函数结合</a></li><li><a href="#获取取命令行参数">获取取命令行参数</a></li><li><a href="#包的导入">包的导入</a></li><li><a href="#给导入的包起别名">给导入的包起别名</a></li><li><a href="#导入包的使用">导入包的使用</a></li><li><a href="#关于包的约定">关于包的约定</a></li><li><a href="#下划线引包">下划线引包</a></li></ul><h2 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h2><p>如果一个函数中有多个defer,它们会以LIFO(先进后出)的顺序调用，<br>即使其中有defer调用过程中发生错误，这些调用依旧会执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">defer fmt.Println(&quot;in defer&quot;) //延迟调用，在main函数结束前调用</span><br><span class="line">fmt.Println(&quot;in main&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">func test(x int) &#123;</span><br><span class="line">fmt.Println(100 / x)</span><br><span class="line">&#125;</span><br><span class="line">func main() &#123;</span><br><span class="line">defer fmt.Println(&quot;in defer&quot;) //延迟调用，在main函数结束前调用</span><br><span class="line">fmt.Println(&quot;in main&quot;)</span><br><span class="line">defer fmt.Println(&quot;aa&quot;)</span><br><span class="line">defer test(0) //这个调用会出现panic，但是后面的defer调用依旧会执行</span><br><span class="line">defer fmt.Println(&quot;bb&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="defer与匿名函数结合"><a href="#defer与匿名函数结合" class="headerlink" title="defer与匿名函数结合"></a>defer与匿名函数结合</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">a := 10</span><br><span class="line">b := 20</span><br><span class="line">defer func(a, b int) &#123;</span><br><span class="line">fmt.Println(&quot;in defer func a=&quot;, a)</span><br><span class="line">fmt.Println(&quot;in defer func b=&quot;, b)</span><br><span class="line">&#125;(a, b) //只是传入参数，但未执行，所以执行结果是a=10,b=20,都是未改变的值</span><br><span class="line"></span><br><span class="line">a = 110</span><br><span class="line">b = 220</span><br><span class="line">fmt.Println(&quot;in main a=&quot;, a)</span><br><span class="line">fmt.Println(&quot;in main b=&quot;, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">a := 10</span><br><span class="line">b := 20</span><br><span class="line">defer func() &#123;</span><br><span class="line">fmt.Println(&quot;in defer func a=&quot;, a)</span><br><span class="line">fmt.Println(&quot;in defer func b=&quot;, b)</span><br><span class="line">&#125;() // 匿名调用 ，调用的是最近变量，所以这里是调用的改变后的a,b的值:110,220</span><br><span class="line"></span><br><span class="line">a = 110</span><br><span class="line">b = 220</span><br><span class="line">fmt.Println(&quot;in main a=&quot;, a)</span><br><span class="line">fmt.Println(&quot;in main b=&quot;, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取取命令行参数"><a href="#获取取命令行参数" class="headerlink" title="获取取命令行参数"></a>获取取命令行参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;os&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">list := os.Args</span><br><span class="line">for i, data := range list &#123;</span><br><span class="line">fmt.Printf(&quot;os.Args[%v]= %v\n&quot;, i, data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="包的导入"><a href="#包的导入" class="headerlink" title="包的导入"></a>包的导入</h2><p>导入的包必须使用，否则编译不能通过</p><h2 id="给导入的包起别名"><a href="#给导入的包起别名" class="headerlink" title="给导入的包起别名"></a>给导入的包起别名</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">io &quot;fmt&quot; //别名放于包名之前，用空格分隔</span><br><span class="line">&quot;os&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">list := os.Args</span><br><span class="line">for i, data := range list &#123;</span><br><span class="line">io.Printf(&quot;os.Args[%v]= %v\n&quot;, i, data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="导入包的使用"><a href="#导入包的使用" class="headerlink" title="导入包的使用"></a>导入包的使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">. &quot;fmt&quot; // 使用点代替导入的包史，引用时直接使用不用再写包名</span><br><span class="line">. &quot;os&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">list := Args // 不写包名，直接使用</span><br><span class="line">for i, data := range list &#123;</span><br><span class="line">Printf(&quot;os.Args[%v]= %v\n&quot;, i, data)  // 不写包名</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="关于包的约定"><a href="#关于包的约定" class="headerlink" title="关于包的约定"></a>关于包的约定</h2><p>1）分文件编程（多个源文件），必须放在src目录<br>2）设置GOPATH环境变量，$GOPATH环境变量必须包括到src的上一级目录<br>3) 同一个目录，包名必须一样<br>4）go env查看go相关的环境路径<br>5) 同一个目录，调用别的文件的函数，无需包名引用，直接调用即可</p><h2 id="下划线引包"><a href="#下划线引包" class="headerlink" title="下划线引包"></a>下划线引包</h2><p>有时，用户可能需要导入一个包，但是不需要引用这个包里的标识符，在这种情况下，可以使用空白标识符_来重命名这个导入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import (</span><br><span class="line">  _ &quot;fmt&quot;</span><br><span class="line">  )</span><br></pre></td></tr></table></figure></p><p>这个操作其实是引用该包，而不直接使用包里的函数，而是调用了该包的init函数</p>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go 1.31 流程控制</title>
      <link href="/2019/05/17/golang/go-1-31-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6_/"/>
      <url>/2019/05/17/golang/go-1-31-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6_/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#if语句">if语句</a></li><li><a href="#switch">switch</a></li><li><a href="#for循环">for循环</a></li><li><a href="#continue跳出本次循环进入下一次循环">continue跳出本次循环，进入下一次循环</a></li><li><a href="#break跳出循环如果多层嵌套循环跳出最近的那个内循环">break跳出循环，如果多层嵌套循环，跳出最近的那个内循环</a></li></ul><h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line"></span><br><span class="line">/* 定义局部变量 */</span><br><span class="line">var d int = 10</span><br><span class="line"></span><br><span class="line">/* 使用 if 语句判断布尔表达式 */</span><br><span class="line">if d == 10 &#123;</span><br><span class="line">/* 如果条件为 true 则执行以下语句 */</span><br><span class="line">fmt.Println(&quot;d == 10&quot;)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">fmt.Println(&quot;d != 10&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  //if 中的局部变量</span><br><span class="line">  // d的作用域只在if的范围内有效</span><br><span class="line">  if d:=10 ;d == 10 &#123;</span><br><span class="line">    fmt.Println(&quot;d == 10&quot;)</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    fmt.Println(&quot;d != 10&quot;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var e int = 9</span><br><span class="line">if e == 10 &#123;</span><br><span class="line">  fmt.Println(&quot;d == 10&quot;)</span><br><span class="line">&#125; else if e &gt; 10 &#123;</span><br><span class="line">  fmt.Println(&quot;e &gt; 10&quot;)</span><br><span class="line">&#125; else if e &lt; 10 &#123;</span><br><span class="line">  fmt.Println(&quot;e &lt; 10&quot;)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  fmt.Println(&quot;这是不可能的&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">var num int</span><br><span class="line">fmt.Printf(&quot;please input floor number:&quot;)</span><br><span class="line">fmt.Scan(&amp;num)</span><br><span class="line">switch num &#123; //switch 后面是变量本身</span><br><span class="line">// switch num := 5; num &#123; //switch 支持一个初始化语句，用;分隔</span><br><span class="line">case 1, 5:</span><br><span class="line">fmt.Println(&quot;case is 1 or 5&quot;)</span><br><span class="line">fallthrough // 不跳出switch语句，后面的条件无条件地执行</span><br><span class="line">case 2:</span><br><span class="line">fmt.Println(&quot;case is :&quot;, 2)</span><br><span class="line">case 3:</span><br><span class="line">fmt.Println(&quot;case is :&quot;, 3)</span><br><span class="line">case 4:</span><br><span class="line">fmt.Println(&quot;case is :&quot;, 4)</span><br><span class="line">default:</span><br><span class="line">fmt.Println(&quot;this is default case&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// case 判断一个表达式</span><br><span class="line">var grade string</span><br><span class="line">fmt.Printf(&quot;please input grade:&quot;)</span><br><span class="line">fmt.Scan(&amp;grade)</span><br><span class="line">switch &#123;</span><br><span class="line">case grade == &quot;A&quot;:</span><br><span class="line">fmt.Printf(&quot;优秀!\n&quot;)</span><br><span class="line">case grade == &quot;B&quot;, grade == &quot;C&quot;:</span><br><span class="line">fmt.Printf(&quot;良好\n&quot;)</span><br><span class="line">fallthrough // 不跳出switch语句，下一句case无条件地执行</span><br><span class="line">case grade == &quot;D&quot;:</span><br><span class="line">fmt.Printf(&quot;及格\n&quot;)</span><br><span class="line">fallthrough // 不跳出switch语句，下一句case无条件地执行</span><br><span class="line">case grade == &quot;F&quot;:</span><br><span class="line">break //跳出switch</span><br><span class="line">fmt.Printf(&quot;不及格\n&quot;)</span><br><span class="line">default:</span><br><span class="line">fmt.Printf(&quot;差\n&quot;)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(&quot;你输入的grade:%s\n&quot;, grade)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><p>格式：<br>for 初始条件；判断条件；条件变化 {</p><p>}<br>或使用range迭代，下标从0开始<br>for index,data := range iterable_obj {</p><p>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sum := 0</span><br><span class="line">for i := 1; i &lt; 10; i++ &#123;</span><br><span class="line">  sum = sum + i</span><br><span class="line">  fmt.Println(sum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str := &quot;abc&quot;</span><br><span class="line">for i, data := range str &#123;</span><br><span class="line">  fmt.Printf(&quot;The No. %d element is: %c\n&quot;, i, data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用_丢弃返回的下标<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str := &quot;abc&quot;</span><br><span class="line">for _, data := range str &#123;</span><br><span class="line">  fmt.Println(data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>丢弃返回元素，再通过下标取元素<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">str := &quot;abc&quot;</span><br><span class="line">for i, _ := range str &#123;</span><br><span class="line">fmt.Printf(&quot;%c\n&quot;, str[i])</span><br><span class="line">&#125;</span><br><span class="line">//等价于：</span><br><span class="line">for i := range str &#123;</span><br><span class="line">fmt.Printf(&quot;%c\n&quot;, str[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>for后面不写任何内容，表示条件永远为值，死循环<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for &#123;</span><br><span class="line">  fmt.Println(i)</span><br><span class="line">  if i == 99999 &#123;</span><br><span class="line">    break</span><br><span class="line">  &#125;</span><br><span class="line">  i++</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="continue跳出本次循环，进入下一次循环"><a href="#continue跳出本次循环，进入下一次循环" class="headerlink" title="continue跳出本次循环，进入下一次循环"></a>continue跳出本次循环，进入下一次循环</h2><h2 id="break跳出循环，如果多层嵌套循环，跳出最近的那个内循环"><a href="#break跳出循环，如果多层嵌套循环，跳出最近的那个内循环" class="headerlink" title="break跳出循环，如果多层嵌套循环，跳出最近的那个内循环"></a>break跳出循环，如果多层嵌套循环，跳出最近的那个内循环</h2>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go 1.25 类型转换</title>
      <link href="/2019/05/17/golang/go-1-25-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
      <url>/2019/05/17/golang/go-1-25-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#不兼容类型">不兼容类型</a></li><li><a href="#in-转-string">in 转 string</a></li><li><a href="#string-转-int">string 转 int</a></li><li><a href="#字符类型本质就是整形">字符类型，本质就是整形</a></li><li><a href="#int-转-float32">int 转 float32</a></li><li><a href="#string到float64">string到float64</a></li><li><a href="#string到float32">string到float32</a></li><li><a href="#float64-转成-int">float64 转成 int</a></li></ul><h2 id="不兼容类型"><a href="#不兼容类型" class="headerlink" title="不兼容类型"></a>不兼容类型</h2><p>不能转换的类型，叫不兼容类型<br>如：bool不能转为int，整型也不能转为bool<br>0就是假，非0就是真</p><h2 id="in-转-string"><a href="#in-转-string" class="headerlink" title="in 转 string"></a>in 转 string</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">    &quot;strconv&quot;</span><br><span class="line">    &quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    t := strconv.Itoa(123) //整型转字条串</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="string-转-int"><a href="#string-转-int" class="headerlink" title="string 转 int"></a>string 转 int</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">i, _ := strconv.Atoi(&quot;100&quot;)</span><br><span class="line">fmt.Println(i)</span><br></pre></td></tr></table></figure><h2 id="字符类型，本质就是整形"><a href="#字符类型，本质就是整形" class="headerlink" title="字符类型，本质就是整形"></a>字符类型，本质就是整形</h2><p>如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">var ch byte</span><br><span class="line">ch = &apos;a&apos;</span><br><span class="line">var t int</span><br><span class="line">t = int(ch) //类型转换，把ch的值取出来，转成int再赋值给t</span><br><span class="line">fmt.Println(&quot;t = &quot;, t)</span><br><span class="line">fmt.Printf(&quot;t = %c&quot;, t)  // 格式化为字符再输出</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="int-转-float32"><a href="#int-转-float32" class="headerlink" title="int 转 float32"></a>int 转 float32</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var sum int = 17</span><br><span class="line">var count int = 5</span><br><span class="line">var mean float32</span><br><span class="line"></span><br><span class="line">mean = float32(sum)/float32(count)</span><br><span class="line">fmt.Printf(&quot;mean 的值为: %f\n&quot;,mean)</span><br></pre></td></tr></table></figure><h2 id="string到float64"><a href="#string到float64" class="headerlink" title="string到float64"></a>string到float64</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">float,err := strconv.ParseFloat(string,64)</span><br></pre></td></tr></table></figure><h2 id="string到float32"><a href="#string到float32" class="headerlink" title="string到float32"></a>string到float32</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">float,err := strconv.ParseFloat(string,32)</span><br></pre></td></tr></table></figure><h2 id="float64-转成-int"><a href="#float64-转成-int" class="headerlink" title="float64 转成 int"></a>float64 转成 int</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var a float64</span><br><span class="line">a = 1.9</span><br><span class="line">b := int(a)</span><br><span class="line">fmt.Println(a, b)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go 1.16 格式化输出和用户输入</title>
      <link href="/2019/05/17/golang/go-1-16-%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA%E5%92%8C%E7%94%A8%E6%88%B7%E8%BE%93%E5%85%A5/"/>
      <url>/2019/05/17/golang/go-1-16-%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA%E5%92%8C%E7%94%A8%E6%88%B7%E8%BE%93%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#格式化输出">格式化输出</a></li><li><a href="#接受用户输入">接受用户输入</a></li></ul><h2 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">a := 10</span><br><span class="line">b := &quot;abc&quot;</span><br><span class="line">c := &apos;a&apos;</span><br><span class="line">d := 3.14</span><br><span class="line">fmt.Printf(&quot;%T,%T,%T,%T\n&quot;, c, b, c, d) // %T 操作变量所属的类型</span><br><span class="line">//%d 整形格式</span><br><span class="line">//%s 字符串格式</span><br><span class="line">//%c 字符格式</span><br><span class="line">//%f 浮点格式</span><br><span class="line">// %v 自动匹配格式输出</span><br><span class="line">fmt.Printf(&quot;a = %d,b = %s,c = %c,d = %f\n&quot;, a, b, c, d)</span><br><span class="line">fmt.Printf(&quot;a = %v,b = %v,c = %v,d = %v\n&quot;, a, b, c, d)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接受用户输入"><a href="#接受用户输入" class="headerlink" title="接受用户输入"></a>接受用户输入</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line"></span><br><span class="line">var input_num int</span><br><span class="line">fmt.Printf(&quot;please input numbers:&quot;)</span><br><span class="line">  //阻塞，等待用户输入</span><br><span class="line">fmt.Scan(&amp;input_num) // 注意，这里是取input_num的内存地址</span><br><span class="line">fmt.Print(&quot;input_num = &quot;, input_num)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go 1.07 变量</title>
      <link href="/2019/05/17/golang/go-1-07-%E5%8F%98%E9%87%8F/"/>
      <url>/2019/05/17/golang/go-1-07-%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#变量名命名规范">变量名命名规范：</a></li><li><a href="#关键字">关键字</a></li><li><a href="#变量声明">变量声明</a></li><li><a href="#关于输出格式">关于输出格式</a></li><li><a href="#注意">注意：</a></li></ul><h2 id="变量名命名规范："><a href="#变量名命名规范：" class="headerlink" title="变量名命名规范："></a>变量名命名规范：</h2><p>1）组成只能是：字母，数字，下划线<br>2）不能以数字开头<br>3）名字不能是关键字<br>4）区分大小写</p><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><p>下面列举了 Go 代码中会使用到的 25 个关键字或保留字：</p><table><thead><tr><th>——–</th><th>———–</th><th>——</th><th>———</th><th>——</th></tr></thead><tbody><tr><td>break</td><td>default</td><td>func</td><td>interface</td><td>select</td></tr><tr><td>case</td><td>defer</td><td>go</td><td>map</td><td>struct</td></tr><tr><td>chan</td><td>else</td><td>goto</td><td>package</td><td>switch</td></tr><tr><td>const</td><td>fallthrough</td><td>if</td><td>range</td><td>type</td></tr><tr><td>continue</td><td>for</td><td>import</td><td>return</td><td>var</td></tr></tbody></table><p>除了以上介绍的这些关键字，Go 语言还有 36 个预定义标识符：</p><table><thead><tr><th>——</th><th>——-</th><th>——-</th><th>——-</th><th>——</th><th>——-</th><th>———</th><th>———-</th><th>——-</th></tr></thead><tbody><tr><td>append</td><td>bool</td><td>byte</td><td>cap</td><td>close</td><td>complex</td><td>complex64</td><td>complex128</td><td>uint16</td></tr><tr><td>copy</td><td>false</td><td>float32</td><td>float64</td><td>imag</td><td>int</td><td>int8</td><td>int16</td><td>uint32</td></tr><tr><td>int32</td><td>int64</td><td>iota</td><td>len</td><td>make</td><td>new</td><td>nil</td><td>panic</td><td>uint64</td></tr><tr><td>print</td><td>println</td><td>real</td><td>recover</td><td>string</td><td>true</td><td>uint</td><td>uint8</td><td>uintptr</td></tr></tbody></table><h2 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h2><p>1）声明格式：var 变量名  类型<br>2）变量声明后，必须要使用<br>3）只是声明，没有初始化的变量，默认值为0<br>4）同一个 {} 中的变量名是唯一的<br>5）可以同时声明多个变量，如var a,b,c int</p><p>变量声明举例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var a int</span><br><span class="line">var b int = 10</span><br><span class="line">c := 20 //自动推导类型</span><br><span class="line">i,j := 10,20  //多重变量赋值</span><br><span class="line">i,j = j,i  //变量交换</span><br><span class="line">var tmp</span><br><span class="line">tmp,_ = i,j // _为匿名变量，丢弃数据，不处理</span><br></pre></td></tr></table></figure></p><p>代码示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">a := 10</span><br><span class="line">fmt.Printf(&quot;c type is %T\n&quot;, a)</span><br><span class="line">// %T打印变量的所属的类型</span><br><span class="line">  // fmt.Printf 不换行输出，如果需要换行，则需要手动增加 \n 到输出之字符串的末尾</span><br><span class="line">  // fmt.Println 自动换行输出</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="关于输出格式"><a href="#关于输出格式" class="headerlink" title="关于输出格式"></a>关于输出格式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">%d 整形格式</span><br><span class="line">%s 字符串格式</span><br><span class="line">%c 字符格式</span><br><span class="line">%f 浮点格式</span><br><span class="line">%v 自动匹配格式输出</span><br></pre></td></tr></table></figure><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在liteIDE中编译运行代码时，源代码的文件不能*_test.go结尾，</span><br><span class="line">否则编译不过，报错：</span><br><span class="line">go build &lt;dir&gt;: no non-test Go files in &lt;dir&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go 1.03 环境搭建</title>
      <link href="/2019/05/17/golang/go-1-03-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2019/05/17/golang/go-1-03-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#go开发环境搭建">go开发环境搭建</a><ul><li><a href="#下载go安装包">下载go安装包</a></li><li><a href="#下载开发ide我使用liteide">下载开发IDE，我使用liteide</a></li><li><a href="#安装下载好的包-解压到需要的路径即可">安装下载好的包–解压到需要的路径即可</a></li><li><a href="#设置系统环境变量和创建开发工程目录">设置系统环境变量和创建开发工程目录</a></li></ul></li></ul><h1 id="go开发环境搭建"><a href="#go开发环境搭建" class="headerlink" title="go开发环境搭建"></a>go开发环境搭建</h1><h2 id="下载go安装包"><a href="#下载go安装包" class="headerlink" title="下载go安装包"></a>下载go安装包</h2><p>官网下载页面：<br><a href="https://golang.org/dl/" target="_blank" rel="noopener">https://golang.org/dl/</a><br>中文社区下载页面：<br><a href="https://studygolang.com/dl" target="_blank" rel="noopener">https://studygolang.com/dl</a><br>linux系统，下载链接：<br><a href="https://dl.google.com/go/go1.12.5.linux-amd64.tar.gz" target="_blank" rel="noopener">https://dl.google.com/go/go1.12.5.linux-amd64.tar.gz</a><br>安装文档介绍：<br><a href="http://docs.studygolang.com/doc/install" target="_blank" rel="noopener">http://docs.studygolang.com/doc/install</a></p><h2 id="下载开发IDE，我使用liteIDE"><a href="#下载开发IDE，我使用liteIDE" class="headerlink" title="下载开发IDE，我使用liteIDE"></a>下载开发IDE，我使用liteIDE</h2><p>下载页面：<a href="http://liteide.org/cn/" target="_blank" rel="noopener">http://liteide.org/cn/</a><br>选一个下载地址：<a href="https://github.com/visualfc/liteide/releases/download/x36/liteidex36.linux64-qt5.5.1.tar.gz" target="_blank" rel="noopener">https://github.com/visualfc/liteide/releases/download/x36/liteidex36.linux64-qt5.5.1.tar.gz</a></p><h2 id="安装下载好的包–解压到需要的路径即可"><a href="#安装下载好的包–解压到需要的路径即可" class="headerlink" title="安装下载好的包–解压到需要的路径即可"></a>安装下载好的包–解压到需要的路径即可</h2><p>golang:<br>sudo tar -C /usr/local -xzf go1.12.5.linux-amd64.tar.gz</p><p>liteide:<br>sudo tar -C /usr/local -xzf liteidex36.linux64-qt5.5.1.tar.gz</p><h2 id="设置系统环境变量和创建开发工程目录"><a href="#设置系统环境变量和创建开发工程目录" class="headerlink" title="设置系统环境变量和创建开发工程目录"></a>设置系统环境变量和创建开发工程目录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"># 创建开发代码的工程目录，并追加到GOPATH环境变量</span><br><span class="line">mkdir -p ~/go/src</span><br><span class="line">echo &apos;export GOPATH=$HOME/go&apos; &gt;&gt; ~/.bashrc</span><br><span class="line"># 把go的安装目录追加到PATH环境变量</span><br><span class="line">echo &apos;export PATH=$PATH:$GOPATH/bin:/usr/local/go/bin&apos; &gt;&gt; ~/.bashrc</span><br><span class="line">source ~/.bashrc</span><br><span class="line"># 使用go version 验证go安装是否成功</span><br><span class="line">go version</span><br><span class="line"># 追加liteide的安装路径到PATH环境变量</span><br><span class="line"></span><br><span class="line">echo &apos;export PATH=/usr/local/liteide/bin:$PATH&apos; &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure><h2 id="缺少libstdc-so-6而摄错"><a href="#缺少libstdc-so-6而摄错" class="headerlink" title="缺少libstdc++.so.6而摄错"></a>缺少libstdc++.so.6而摄错</h2><p>如果是在ubuntu14.04上运行liteIDE，可以会遇到如下报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">liteide: /usr/lib/x86_64-linux-gnu/libstdc++.so.6: version `CXXABI_1.3.8&apos; not found (required by /usr/local/liteide/bin/../lib/libQt5Core.so.5)</span><br><span class="line">liteide: /usr/lib/x86_64-linux-gnu/libstdc++.so.6: version `CXXABI_1.3.8&apos; not found (required by /usr/local/liteide/bin/../lib/libicui18n.so.55)</span><br><span class="line">liteide: /usr/lib/x86_64-linux-gnu/libstdc++.so.6: version `CXXABI_1.3.8&apos; not found (required by /usr/local/liteide/bin/../lib/libicuuc.so.55)</span><br></pre></td></tr></table></figure></p><p>解决办法：<br>从ubuntu18的机器上找到libstdc++.so.6，复制到 /usr/local/liteide/lib/libstdc++.so.6<br>再启动即可</p><p>参考链接：<a href="https://github.com/visualfc/liteide/issues/961" target="_blank" rel="noopener">https://github.com/visualfc/liteide/issues/961</a></p><p>##go命令<br>go build xxx.go<br>此命令只会编译代码，不能运行可执行程序<br>go run xxx.go<br>此命令只会执行go文件，不会编译成可执行程序</p>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-hexo使用说明</title>
      <link href="/2017/03/23/3-hexo-instruction/"/>
      <url>/2017/03/23/3-hexo-instruction/</url>
      
        <content type="html"><![CDATA[<blockquote><p>下面如果没有特殊说明， <code>_config.yml</code> 都指主题配置文件，即 <code>3-hexo</code> 目录下</p></blockquote><h2 id="自定义首页"><a href="#自定义首页" class="headerlink" title="自定义首页"></a>自定义首页</h2><p>可查看这篇文章： </p><h2 id="blog快捷键"><a href="#blog快捷键" class="headerlink" title="blog快捷键"></a>blog快捷键</h2><p>可查看这篇文章： </p><h2 id="更换头像"><a href="#更换头像" class="headerlink" title="更换头像"></a>更换头像</h2><p>两种方式：</p><ol><li>替换 <code>source/img/avatar.jpg</code> 图片。</li><li>修改 <code>_config.yml</code> 中头像的配置记录</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 你的头像url</span><br><span class="line">avatar: /img/avatar.jpg</span><br><span class="line">favicon: /img/avatar.jpg</span><br></pre></td></tr></table></figure><h2 id="设置链接图标"><a href="#设置链接图标" class="headerlink" title="设置链接图标"></a>设置链接图标</h2><p>如下，如果没有连接，则不展示图标。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#链接图标，链接为空则不显示</span><br><span class="line">link:</span><br><span class="line">  rss: /atom.xml</span><br><span class="line">  github: https://github.com/yelog</span><br><span class="line">  facebook: https://www.facebook.com/faker.tops</span><br><span class="line">  twitter:</span><br><span class="line">  linkedin:</span><br><span class="line">  instagram:</span><br><span class="line">  reddit: https://www.reddit.com/user/yelog/</span><br><span class="line">  weibo: http://weibo.com/u/2307534817</span><br><span class="line">  email: jaytp@qq.com</span><br></pre></td></tr></table></figure></p><h2 id="开启关于页面"><a href="#开启关于页面" class="headerlink" title="开启关于页面"></a>开启<code>关于</code>页面</h2><ol><li><p>在 <code>hexo</code> 根目录执行以下，创建 <code>关于</code> 页面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page <span class="string">"about"</span></span><br></pre></td></tr></table></figure></li><li><p>位置： <code>source/aoubt/index.md</code> ，根据需要进行编辑。</p></li><li>在主题中开启显示：修改主题根目录 <code>_config.yml</code> 中的 <code>about</code> 的 <code>on</code> 为 <code>true</code>，如下所示<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">  about:</span>  <span class="comment"># '关于' 按钮</span></span><br><span class="line"><span class="attr">    on:</span> <span class="literal">true</span> <span class="comment"># 是否显示</span></span><br><span class="line"><span class="attr">    url:</span> <span class="string">/about</span>  <span class="comment"># 跳转链接</span></span><br><span class="line"><span class="attr">    type:</span> <span class="number">1</span> <span class="comment"># 跳转类型 1：站内异步跳转 2：当前页面跳转 3：打开新的tab页</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="配置评论系统"><a href="#配置评论系统" class="headerlink" title="配置评论系统"></a>配置评论系统</h2><p>目前添加了三种评论系统 <strong>disqus、多说、网易云跟帖</strong></p><blockquote><p><code>日志：</code> 2017-03-21：多说将于2017-06-01正式关停服务</p></blockquote><h3 id="启用评论"><a href="#启用评论" class="headerlink" title="启用评论"></a>启用评论</h3><p>以 <code>disqus</code> 为例；</p><ol><li>关掉其他两个评论（设置on: false）</li><li>启用 <code>disqus</code> ,设置on: true</li><li>登陆 <code>disqus</code> 注册，得到shortname，填入shortname。</li><li>重启 <code>hexo</code>。</li></ol><h3 id="meta区显示评论数"><a href="#meta区显示评论数" class="headerlink" title="meta区显示评论数"></a>meta区显示评论数</h3><p>开启设置 <code>_config.yml</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">comment_count: true</span><br><span class="line"># 文章标题下方显示评论数</span><br></pre></td></tr></table></figure></p><p><img src="http://img.xiangzhangshugongyi.com/FlDHXpVnJ-ECFCehRBoKkQMlqj_R.png" alt="开启效果"></p><h3 id="评论区预加载"><a href="#评论区预加载" class="headerlink" title="评论区预加载"></a>评论区预加载</h3><p>开启设置 <code>_config.yml</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">preload_comment: false</span><br></pre></td></tr></table></figure></p><ol><li>false: 当点击评论条等区域时再加载评论模块</li><li>true: 页面加载时加载评论区</li></ol><p><img src="http://img.xiangzhangshugongyi.com/FrYn2xsPMLBizQZ_p_mCa-hJYTG_.png" alt="关闭效果"></p><h2 id="样式设置"><a href="#样式设置" class="headerlink" title="样式设置"></a>样式设置</h2><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>首先要关闭hexo根目录下<code>_config.yml</code>中的高亮设置：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">highlight:</span><br><span class="line">  enable: false</span><br></pre></td></tr></table></figure></p><p>配置主题下<code>_config.yml</code>中的高亮设置：<br>可以根据提示，配置喜欢的高亮主题<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">highlight:</span><br><span class="line">  on: true # true开启代码高亮</span><br><span class="line">  lineNum: true # true显示行号</span><br><span class="line">  theme: darcula</span><br><span class="line"># 代码高亮主题,效果可以查看 https://highlightjs.org/static/demo/</span><br><span class="line"># 支持主题：</span><br><span class="line"># sublime : 参考sublime的高亮主题</span><br><span class="line"># darcula : 参考idea中的darcula的主题</span><br><span class="line"># atom-dark : 参考Atom的dark主题</span><br><span class="line"># atom-light : 参考Atom的light主题</span><br><span class="line"># github : 参考GitHub版的高亮主题</span><br><span class="line"># github-gist : GitHub-Gist主题</span><br><span class="line"># brown-paper : 牛皮纸效果</span><br><span class="line"># gruvbox-light : gruvbox的light主题</span><br><span class="line"># gruvbox-dark ： gruvbox的dark主题</span><br><span class="line"># rainbow :</span><br><span class="line"># railscasts :</span><br><span class="line"># sunburst :</span><br><span class="line"># kimbie-dark :</span><br><span class="line"># kimbie-light :</span><br><span class="line"># school-book : 纸张效果</span><br></pre></td></tr></table></figure></p><h3 id="MathJax数学公式"><a href="#MathJax数学公式" class="headerlink" title="MathJax数学公式"></a>MathJax数学公式</h3><p>修改 <code>_config.yml</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># MathJax 数学公式支持</span><br><span class="line">mathjax:</span><br><span class="line">  on: true #是否启用</span><br><span class="line">  per_page: false # 若只渲染单个页面，此选项设为false，页面内加入 mathjax: true</span><br></pre></td></tr></table></figure></p><p>考虑到页面的加载速度，支持渲染单个页面。<br>设置 <code>per_page: false</code> ,在需要渲染的页面内 加入 <code>mathjax: true</code></p><blockquote><p><strong><code>注意:</code></strong><br>由于hexo的MarkDown渲染器与MathJax有冲突，可能会造成矩阵等使用不正常。所以在使用之前需要修改两个地方<br>编辑 <code>node_modules\marked\lib\marked.js</code> 脚本</p></blockquote><ol><li><p>将451行 ，这一步取消了对 <code>\\,\{,\}</code> 的转义(escape)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">escape</span>: <span class="regexp">/^\\([\\`*&#123;&#125;\[\]()# +\-.!_&gt;])/</span>,</span><br><span class="line">改为</span><br><span class="line"><span class="built_in">escape</span>: <span class="regexp">/^\\([`*\[\]()# +\-.!_&gt;])/</span>,</span><br></pre></td></tr></table></figure></li><li><p>将459行，这一步取消了对斜体标记 <code>_</code> 的转义</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">em: <span class="regexp">/^\b_((?:[^_]|__)+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span>,</span><br><span class="line">改为</span><br><span class="line">em:<span class="regexp">/^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span>,</span><br></pre></td></tr></table></figure></li></ol><h3 id="表格样式"><a href="#表格样式" class="headerlink" title="表格样式"></a>表格样式</h3><p>目前提供了3中样式，修改 <code>_config.yml</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">table: green_title</span><br><span class="line"># table 的样式</span><br><span class="line"># 为空时类似github的table样式</span><br><span class="line"># green 绿色样式</span><br><span class="line"># green_title 头部为青色的table样式</span><br></pre></td></tr></table></figure></p><h3 id="文章列表的hover样式"><a href="#文章列表的hover样式" class="headerlink" title="文章列表的hover样式"></a>文章列表的hover样式</h3><p>鼠标移入的背景色和文字颜色变动，设置 <code>_config.yml</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#文章列表 鼠标移上去的样式, 为空时使用默认效果</span><br><span class="line">article_list:</span><br><span class="line">  hover:</span><br><span class="line">    background: '#e2e0e0'  # 背景色:提供几种：'#c1bfc1'  '#fbf4a8'</span><br><span class="line">    color:     # 文字颜色 提供几种：'#ffffff'</span><br><span class="line"># 注意：由于颜色如果包含#，使用单引号 ' 引起来</span><br></pre></td></tr></table></figure></p><h2 id="开启字数统计"><a href="#开启字数统计" class="headerlink" title="开启字数统计"></a>开启字数统计</h2><ol><li>开启此功能需先安装插件，在 hexo根目录 执行 <code>npm i hexo-wordcount --save</code></li><li>修改 <code>_config.yml</code></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">word_count: true</span><br></pre></td></tr></table></figure><h2 id="多作者模式"><a href="#多作者模式" class="headerlink" title="多作者模式"></a>多作者模式</h2><p>可查看这篇文章： </p><h2 id="文章排序及置顶"><a href="#文章排序及置顶" class="headerlink" title="文章排序及置顶"></a>文章排序及置顶</h2><p>可查看这篇文章： </p><h2 id="关于写文章"><a href="#关于写文章" class="headerlink" title="关于写文章"></a>关于写文章</h2><h3 id="如何写"><a href="#如何写" class="headerlink" title="如何写"></a>如何写</h3><p>每篇文章最好写上文集和标签，方便筛选和查看。<br>一般推荐一篇文章设置一个文集，一个或多个标签<br><code>categories</code>:文集，为左侧列表<br><code>tags</code>:标签，通过#来筛选<br>例如 本篇文章的设置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 3-hexo使用说明</span><br><span class="line">date: 2017-03-23 15:13:47</span><br><span class="line">categories:</span><br><span class="line">- 工具</span><br><span class="line">tags:</span><br><span class="line">- hexo</span><br><span class="line">- 3-hexo</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><h3 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h3><p>1.设置模板，blog根目录 <code>scaffolds/post.md</code><br>加入categories,tags等，这样以后通过 <code>hexo new</code> 生成的模板就不用写这两个单词了。<br>当然，你也可以写入任何你每个文章中都会有的部分。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">categories:</span><br><span class="line">tags:</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><h2 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h2><h3 id="快捷命令"><a href="#快捷命令" class="headerlink" title="快捷命令"></a>快捷命令</h3><p>其实就通过alias，触发一些命令的集合<br>在 <code>~/.bashrc</code> 文件中添加<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> hs=<span class="string">'hexo clean &amp;&amp; hexo g &amp;&amp; hexo s'</span>  <span class="comment">#启动本地服务</span></span><br><span class="line"><span class="built_in">alias</span> hd=<span class="string">'hexo clean &amp;&amp; hexo g &amp;&amp; hexo d'</span>  <span class="comment">#部署博客</span></span><br></pre></td></tr></table></figure></p><p>甚至你也可以加入备份文章的命令，可以自由发挥。</p><h3 id="博客备份（快捷命令升级版）"><a href="#博客备份（快捷命令升级版）" class="headerlink" title="博客备份（快捷命令升级版）"></a>博客备份（快捷命令升级版）</h3><p>为了保证我们写的文章不丢失、快速迁移博客，都需要备份我们的blog。</p><ol><li>博客根目录，执行 <code>git init</code> 创建 git 仓库。</li><li>在 github（或其他托管平台、自建远程仓库等） 创建仓库并和本地仓库建立联系。</li><li>在 <code>~/.bashrc</code> 文件中添加<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> hs=<span class="string">'hexo clean &amp;&amp; hexo g &amp;&amp; hexo s'</span></span><br><span class="line"><span class="built_in">alias</span> hd=<span class="string">'hexo clean &amp;&amp; hexo g &amp;&amp; hexo d &amp;&amp; git add . &amp;&amp; git commit -m "update" &amp;&amp; git push -f'</span></span><br></pre></td></tr></table></figure></li></ol><p>这样，我们在执行 <code>hd</code> 进行部署时，就一同将博客进行备份了</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 3-hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>install confluence</title>
      <link href="/2017/03/23/tools/install-confluence/"/>
      <url>/2017/03/23/tools/install-confluence/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#准备工作">准备工作</a></li><li><a href="#启动confluence">启动confluence</a></li><li><a href="#破解">破解</a></li></ul><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>1.创建目录<br>mkdir -p /data/atlassian/confluence/{conf_home,conf_install}<br>2.修改权限<br>chown -R daemon:daemon  /data/atlassian/confluence<br>3.创建启动脚本，并修改权限<br>cat /opt/run_confluence.sh<br>chmod +x /opt/run_confluence.sh</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">name=&quot;confluence-container&quot;</span><br><span class="line">docker stop $&#123;name&#125; &amp;&amp; docker rm -v $&#123;name&#125;</span><br><span class="line">/usr/bin/docker run --restart=always -d --name &quot;confluence-container&quot; \</span><br><span class="line">    -p &quot;8090:8090&quot; \</span><br><span class="line">    -v &quot;/data/atlassian/confluence/conf_home:/var/atlassian/confluence&quot; \</span><br><span class="line">    cptactionhank/atlassian-confluence:5.8.10</span><br></pre></td></tr></table></figure><h1 id="启动confluence"><a href="#启动confluence" class="headerlink" title="启动confluence"></a>启动confluence</h1><p>1./opt/run_confluence.sh</p><p>2.使用浏览器打开192.168.0.93:8090,选择Production Installation，并占击Next<br><img src="/assets/markdown-img-paste-20180814140754458.png" alt="access_confluence_page1"></p><p>3.记录下Server ID,如：BI31-0PSH-5SYG-6OX8<br>4.暂时停止confluence<br>docker stop confluence-container</p><p>5.查找docker中的atlassian-extras-decoder-v2-3.2.jar<br>find /data/docker/local-storage/docker/ -name “atlassian-extras-decoder-v2-3.2.jar”</p><p>/data/docker/local-storage/docker/aufs/diff/983d62f805befea70fd9c46019a356e3c762b9c929c20ec6c5c37ec0855b091b/usr/local/atlassian/confluence/confluence/WEB-INF/lib/atlassian-extras-decoder-v2-3.2.jar</p><h1 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h1><p>1.重命名atlassian-extras-decoder-v2-3.2.jar为 atlassian-extras-2.4.jar<br>2.解压confluence5.1-crack.zip<br>进入confluence5.1-crack/iNViSiBLE$，执行：keygen.sh</p><p>3.输入name:test1234,这个可以随意，输入之前记录的Server ID</p><p>4.把重新生成的文件重命名，并替换回原路径</p><p>5.单击复制key到剪贴板</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">AAABMA0ODAoPeJxtkMlqwzAQQO/6CkHPCl6SxgQEVWzRmnoJtVOao+JOUoGjBC2m+fsqcX0phbnM9</span><br><span class="line">ngzD60DzNwRh3MfqzhZRUucNi2OgjBBGZhOy4uVZ0XTszr0DlQHqHKnPej6sDWgDSUhSjWI21AmL</span><br><span class="line">NDbJgkSEs6R37Gis5U4AbVgbBjFc9R50MxX5eCL2sE0xUsheyrVII3c9/BkOlAwUz3ig+jdnU8Po</span><br><span class="line">jcwEgrp+wba6wXu/LQuS/6W5qxAHqQsKOFd+fdF6uvoFcdLEkYkWoyA6Yq0d8aCrs6fYGiAGl7RX</span><br><span class="line">b3FJXvluOSY4YZleMOqjM1QrY9CSTPKyOpdNnJdcNxyVqIG9AA6z+g6j0MSbJoXsmh2z+Sx/kjQr</span><br><span class="line">63vFnk2Zf/LbZzuvoSBP8/8ATV6iRMwLAIUC/RpFxXPfEauHjG2QJ3yZ3rukxICFCHDIGkAmCgee</span><br><span class="line">NteYVIYb725rgNrX02f7</span><br></pre></td></tr></table></figure><p>6.启动conflucen,打开<a href="http://ip:8090,填写上一步复制的key" target="_blank" rel="noopener">http://ip:8090,填写上一步复制的key</a><br>7.本文只是记录安装体验过程，商业用途请支持正版</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> confluence </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
